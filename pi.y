%{
	#include<stdio.h>
	#include<stdlib.h>
	#include<string.h>
	int yylex(void);
	int yyerror(const char *s);
    int success=1; 

%}

%union{
int data_type;
char variable[30];
int const_int;
float const_float; 
char const_char; 
char const_string[100];
}

%token IMPORT LCB RCB LB RB LSB RSB
%token MAIN VOID 
%token IF ELSE WHILE BREAK FOR CONTINUE RETURN
%token CONST_CHAR CONST_INT CONST_STRING CONST_FLOAT
%token COMMENT SEMICOLON
%token COMMA PLUS MINUS EXP STAR DIV MOD 
%token GTE LTE GT LT 
%token EQCOMPARE NEQCOMPARE EQ NOT AND OR
%token VARIABLE INPUT OUTPUT

%left PLUS MINUS MOD STAR DIV
%left OR AND EQCOMPARE NEQCOMPARE
%left GTE GT LTE LT

%right EXP
%right NOT

%token<data_type>INT
%token<data_type>CHAR
%token<data_type>FLOAT
%token<data_type>STRING

%type<data_type>DATA_TYPE
%type<variable>VARIABLE
%type<const_int>CONST_INT
%type<const_float>CONST_FLOAT
%type<const_string>CONST_STRING
%type<const_char>CONST_CHAR

%start PROGRAM

%%
PROGRAM: PACKAGES FUNCTIONS MAIN_FUNC

PACKAGES: 	PACKAGE PACKAGES 
			| 

PACKAGE: IMPORT VARIABLE

FUNCTIONS: DATA_TYPE FUNCTION_NAME LB PARAMETER_LIST RB BLOCK

DATA_TYPE: 	  INT 
			| CHAR 
			| FLOAT 
			| STRING

PARAMETER_LIST:   PARAMETER COMMA PARAMETER_LIST 
				| PARAMETER

PARAMETER: DATA_TYPE VARIABLE

MAIN_FUNC: VOID MAIN LB RB BLOCK

BLOCK: LCB STATEMENTS RCB

STATEMENTS: STATEMENT STATEMENTS
			|

STATEMENT: IF_BLOCK 
	| WHILE LB EXPRESSION RB LOOP_BLOCK
	| FOR LB ASSIGNMENT SEMICOLON EXPRESSION SEMICOLON ASSIGNMENT RB LOOP_BLOCK
	| RETURN VARIABLE SEMICOLON
	| RETURN CONSTANT SEMICOLON
	| ASSIGNMENT SEMICOLON
	| FUNCTION_NAME LB FUNCTION_VARIABLE_LIST RB SEMICOLON
	| BLOCK
	| SEMICOLON
	| COMMENT
	| DECLARATION SEMICOLON

FUNCTION_NAME: VARIABLE 
				| INPUT 
				| OUTPUT

FUNCTION_VARIABLE_LIST: ELEMENT COMMA FUNCTION_VARIABLE_LIST 
						| ELEMENT

ELEMENT: CONSTANT 
		| VARIABLE

LOOP_BLOCK: LCB LOOP_STATEMENTS RCB

LOOP_STATEMENTS: LOOP_STATEMENT LOOP_STATEMENTS 
				| 

LOOP_STATEMENT: STATEMENT 
				| BREAK 
				| CONTINUE 

IF_BLOCK: IF LB EXPRESSION RB BLOCK ELSE IF_BLOCK
	| IF LB EXPRESSION RB BLOCK ELSE BLOCK  
	| IF LB EXPRESSION RB BLOCK 

CONSTANT: CONST_INT | CONST_FLOAT | CONST_CHAR | CONST_STRING

ASSIGNMENT: VARIABLE DIMENSION_SEQUENCE EQ ASSIGNMENT_RHS

ASSIGNMENT_RHS: EXPRESSION 
				| FUNCTION_NAME LB FUNCTION_VARIABLE_LIST RB

EXPRESSION: NOT EXPRESSION 
			| EXPRESSION BINOP EXPRESSION 
			| EXPRESSION RELOP EXPRESSION 
			| EXPRESSION LOGOP EXPRESSION 
			| VARIABLE DIMENSION_SEQUENCE

DIMENSION_SEQUENCE: LSB CONST_INT RSB 
				| LSB VARIABLE RSB 
				|

DECLARATION: DATA_TYPE VAR_LIST 

VAR_LIST: VARIABLE DECLARATION_SEQUENCE VALUE

VALUE: EQ CONSTANT 
		|

DECLARATION_SEQUENCE: LSB CONST_INT RSB

BINOP: PLUS
        |MINUS
        |STAR
        |DIV
        |MOD
		|EXP

RELOP: EQCOMPARE
        |NEQCOMPARE
        |LTE
        |LT
        |GTE
        |GT

LOGOP: AND 
        |OR 

%%

int main()
{
    yyparse();
    if(success)
    	printf("Parsing Successful\n"); 
    return 0;
}

int yyerror(const char *msg)
{
	extern int yylineno;
	printf("Parsing Failed\nLine Number: %d %s\n",yylineno,msg);
	success = 0;
	return 0;
}